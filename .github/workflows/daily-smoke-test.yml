name: daily-smoke-test
on:
  workflow_dispatch: # As per documentation, the colon is needed even though no config is required.
  schedule:
    # Cron syntax is "minute[0-59] hour[0-23] date[1-31] month[1-12] day[0-6]". '*' is 'any value', and multiple values
    # can be specified with comma-separated lists. All times are UTC.
    # So this expression means "run at 13:30 UTC every day". This time was chosen because it corresponds to
    # 8:30AM CDT, meaning that any issues will be surfaced towards the start of business.
    - cron: "30 13 * * *"

jobs:
  # Step 1: Build the scanner tarball so it can be installed locally.
  build-scanner-tarball:
    name: 'Build scanner tarball'
    uses: ./.github/workflows/build-scanner-tarball.yml
    with:
      target-branch: 'dev'
  # Step 2: Actually run the tests.
  smoke-test:
    name: 'Run smoke tests'
    needs: build-scanner-tarball
    uses: ./.github/workflows/run-tests.yml
    with:
      # For daily builds, we want to make sure we haven't pushed a breaking change
      # to the scanner's `dev` branch.
      use-scanner-tarball: true
  # Step 3: Build a VSIX artifact for use if needed.
  create-vsix-artifact:
    name: 'Upload VSIX as artifact'
    uses: ./.github/workflows/create-vsix-artifact.yml
  
  # === Report any problems ===
steps:
  name: Report problems
  # There are problems if any step failed or was skipped.
  # Note that the `join()` call omits null values, so if any steps were skipped, they won't have a corresponding
  # value in the string.
  if: ${{ failure() || cancelled() }}
  shell: bash
  env:
    # If we're here because steps failed or were skipped, then that's a critical problem. Otherwise it's a normal one.
    # We can't use the `failure()` or `cancelled()` convenience methods outside of the `if` condition, hence the
    # `contains()` calls.
    IS_CRITICAL: ${{ contains(join(steps.*.outcome), 'failure') || contains(join(steps.*.outcome), 'skipped') }}
    # A link to this run, so the PagerDuty assignee can quickly get here.
    RUN_LINK: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  run: |

    if [[ ${{ env.IS_CRITICAL }} == true ]]; then
      ALERT_SEV="critical"
      ALERT_SUMMARY="Production heartbeat script failed on ${{ runner.os }}"
    else
      ALERT_SEV="info"
      ALERT_SUMMARY="Production heartbeat script succeeded with retries on ${{ runner.os }}"
    fi
    # Define a helper function to create our POST request's data, to sidestep issues with nested quotations.
    generate_post_data() {
    # This is known as a HereDoc, and it lets us declare multi-line input ending when the specified limit string,
    # in this case EOF, is encountered.
    cat <<EOF
    {"payload": {
      "summary": "${ALERT_SUMMARY}",
      "source": "Github Actions",
      "severity": "${ALERT_SEV}"
    },
    "links": [{
      "href": "${{ env.RUN_LINK }}",
      "text": "Link to action execution"
    }],
    "event_action": "trigger",
    "dedup_key": "GH-HB-${{ matrix.os.vm }}-${{ matrix.node }}",
    "routing_key": "${{ secrets.PAGERDUTY_HEARTBEAT_KEY }}"
    }
    EOF
    }
    # Make our POST request
    curl --request POST --data "$(generate_post_data)" https://events.pagerduty.com/v2/enqueue
